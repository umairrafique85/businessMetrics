Special <- c('distinct_id', 'ip', 'token', 'time', 'length', 'campaign_id',
'$bucket', 'bucket')
propsPresence <- sapply(propsVector, function(x){
sapply(segmntd_dfs, function(y){
x %in% names(y)
})
})
df_reps1 <- data.frame(proportionOfEventsOccurredIn = sapply(propsVector, function(y){
round(mean(sapply(segmntd_dfs, function(x){
y %in% names(x)
})),4)*100
}))
df_reps1$property <- rownames(df_reps1)
df_reps1 <- df_reps1 %>% select(property, proportionOfEventsOccurredIn) %>%
arrange(desc(proportionOfEventsOccurredIn))
df_reps1$property_Status <- sapply(1:nrow(df_reps1), function(x){
ifelse(df_reps1$property[x] %in% MixPanel_default, "MixPanel default",
ifelse(str_detect(df_reps1$property[x], 'utm'), "MixPanel default",
ifelse(df_reps1$property[x] %in% Special, "Special",
ifelse(df_reps1$proportionOfEventsOccurredIn[x]>80, "Super",
ifelse(df_reps1$proportionOfEventsOccurredIn[x]>20, "Suspected Super",
"Event property"))))) })
event_counts <- sapply(segmntd_dfs, function(x){
c(x$name[1], nrow(x), {'$browser' %in% names(x)}, ifelse('$current_url' %in% names(x), {
currUrl <- str_extract(x$`$current_url`, '(?:(?!\\?).)*')
uneeqs <- unique(currUrl)
uneeqs[which.max(tabulate(match(currUrl, uneeqs)))]
}, NA))
} )
event_counts <- data.frame(t(event_counts))
names(event_counts) <- c('eventName', 'count', 'onClient', 'triggeredOn')
getTop20 <- function(input_df){
for (x in 1:nrow(input_df)){
if (input_df$cums[x]>=0.2)return(input_df[[1]][1:x])
}
}
df_reps1$dataType = sapply(df_reps1$property, function(x){class(df_simpleProps[[x]])[1]})
df_reps1$dataType <- sapply(1:nrow(df_reps1), function(x){
datClass <- as.character(df_reps1$dataType[x])
extractedVals <- na.omit(df_simpleProps[[df_reps1$property[x]]])
if (datClass=="character"){
if (all(stringr::str_detect(extractedVals, "http"))) {
datClass <- 'url'
} else if (all(stringr::str_detect(extractedVals, '\\..*\\.'))) {
datClass <- "url"
} else if (all(stringr::str_detect(extractedVals, '\\/'))) {
datClass <- 'uri'
}
}
datClass
})
lst_propStats <- lapply(segmntd_dfs, function(x) {
df <- data.frame(property = names(x)[-1], prop_notNA = round(colMeans(!is.na(x[,-1])),2)*100,
dataType = sapply(x[-1], function(y)class(y)[1]))
merge(df, df_reps1, by = 'property') %>% select(property, dataType.y, prop_notNA, dataType_top20percent, property_Status) %>%
as.data.frame() -> df
df$property_Status <- ordered(df$property_Status, levels=c("MixPanel default", "Special",
"Super", "Suspected Super", "Event property"))
df$top_value <- sapply(as.character(df$property), function(prop){
vals <- x[-1][[prop]]
vals <- vals[!is.na(vals)]
uVals <- unique(vals)
# browser()
uVals[which.max(tabulate(match(vals, uVals)))]
})
df
})
df_reps1$dataType_top20percent <- sapply(df_reps1$property, function(x){
df_tops <- df_simpleProps %>% group_by(get(x)) %>% count()
df_tops$props <- prop.table(df_tops$n)
df_tops$cums <- cumsum(df_tops$props)
class(getTop20(df_tops))[1]
}, USE.NAMES = F)
lst_propStats <- lapply(segmntd_dfs, function(x) {
df <- data.frame(property = names(x)[-1], prop_notNA = round(colMeans(!is.na(x[,-1])),2)*100,
dataType = sapply(x[-1], function(y)class(y)[1]))
merge(df, df_reps1, by = 'property') %>% select(property, dataType.y, prop_notNA, dataType_top20percent, property_Status) %>%
as.data.frame() -> df
df$property_Status <- ordered(df$property_Status, levels=c("MixPanel default", "Special",
"Super", "Suspected Super", "Event property"))
df$top_value <- sapply(as.character(df$property), function(prop){
vals <- x[-1][[prop]]
vals <- vals[!is.na(vals)]
uVals <- unique(vals)
# browser()
uVals[which.max(tabulate(match(vals, uVals)))]
})
df
})
df_reps1$wtgAvg_propNotNA <- sapply(df_reps1$property, function(x) {
prop_notNAs <- sapply(1:length(lst_propStats), function(y) {
c(ifelse(x %in% lst_propStats[[y]]$property,
lst_propStats[[y]][lst_propStats[[y]]$property==x,]$prop_notNA, NA),
as.character(event_counts$count[y]))
})
prop_notNAs <- data.frame(t(matrix(as.numeric(prop_notNAs), nrow = 2)))
round(weighted.mean(prop_notNAs$X1, prop_notNAs$X2, na.rm = T))
}, USE.NAMES = F)
View(df_reps1)
View(event_counts)
dfToTest <- segmntd_dfs[[1]]
dfToTest$click_text <- is.na(dfToTest$click_text)
which(sapply(dfToTest, function(col){!length(unique(col))>1}))
which(names(dfToTest)=='click_text')
respIndex <- which(names(dfToTest)=='click_text')
notPredictors <- unique(c(which(sapply(dfToTest, function(col){!length(unique(col))>1})), respIndex))
notPredictors
sapply(names(dfToTest)[-notPredictors], function(predictor){
get(names(dfToTest)[8])
sapply(names(dfToTest)[-notPredictors], function(predictor){
testModel <- glm(click_text ~ get(predictor), data = dfToTest, family = poisson())
pchisq(testModel$null.deviance-testModel$deviance, testModel$df.null-testModel$df.residual, lower.tail = F)
})
View(names(dfToTest))
View(dfToTest)
sapply(names(dfToTest)[-notPredictors], function(predictor){
browser()
testModel <- glm(click_text ~ get(predictor), data = dfToTest, family = poisson())
pchisq(testModel$null.deviance-testModel$deviance, testModel$df.null-testModel$df.residual, lower.tail = F)
})
get(predictor)
summary(testModel)
pchisq(testModel$null.deviance-testModel$deviance, testModel$df.null-testModel$df.residual, lower.tail = F)
summary(testModel)
pchisq(testModel$null.deviance-testModel$deviance, testModel$df.null-testModel$df.residual, lower.tail = F)
levels(dfToTest$`$browser`)
unique(dfToTest$`$browser`)
levels(as.factor(dfToTest$`$browser`))
dfToTest %>% group_by($`$browser`) %>% mean()
dfToTest %>% group_by(`$browser`) %>% mean()
dfToTest %>% group_by(`$browser`) %>% summarize(mean(click_text)
dfToTest %>% group_by(`$browser`) %>% summarize(mean(click_text))
summary(testModel)
pchisq(testModel$null.deviance-testModel$deviance, testModel$df.null-testModel$df.residual, lower.tail = F)
dfToTest %>% group_by(`$browser`) %>% summarize(mean(click_text)) ->toPlot
View(toPlot)
dfToTest %>% group_by(`$browser`) %>% summarize(isNaProp = mean(click_text)) ->toPlot
ggplot(toPlot, aes(x=`$browser`, y=isNaProp)) + geom_point()
dfToTest$`$browser` <- relevel(dfToTest$`$browser`, "ChromeiOs")
dfToTest$`$browser` <- factor(dfToTest$`$browser`)
dfToTest$`$browser` <- relevel(dfToTest$`$browser`, "ChromeiOs")
dfToTest$`$browser` <- relevel(dfToTest$`$browser`, "Chrome iOS")
testModel <- glm(click_text ~ get(predictor), data = dfToTest, family = poisson())
summary(testModel)
dfToTest %>% group_by(`$browser`) %>% count(click_text)
dfToTest %>% group_by(`$browser`) %>% count()
exp(testModel$coefficients)
pchisq(testModel$null.deviance-testModel$deviance, testModel$df.null-testModel$df.residual, lower.tail = F)
library(MASS)
testDA <- lda(click_text ~ `$browser`, data = dfToTest)
summary(testDA)
testDA <- lda(click_text ~ get(predictor), data = dfToTest)
summary(testDA)
testDA
(testModel$null.deviance-testModel$deviance)/testModel$null.deviance
testModel$aic
pchisq(testModel$null.deviance-testModel$deviance, testModel$df.null-testModel$df.residual, lower.tail = F)
sapply(names(dfToTest)[-notPredictors], function(predictor){
traceback()
testModel <- glm(click_text ~ get(predictor), data = dfToTest, family = poisson())
pchisq(testModel$null.deviance-testModel$deviance, testModel$df.null-testModel$df.residual, lower.tail = F)
})
sapply(names(dfToTest)[-notPredictors], function(predictor){
traceback()
testModel <- glm(click_text ~ get(predictor), data = dfToTest, family = poisson())
pchisq(testModel$null.deviance-testModel$deviance, testModel$df.null-testModel$df.residual, lower.tail = F)
})
sapply(names(dfToTest)[-notPredictors], function(predictor){
testModel <- glm(click_text ~ get(predictor), data = dfToTest, family = poisson())
pchisq(testModel$null.deviance-testModel$deviance, testModel$df.null-testModel$df.residual, lower.tail = F)
})
sapply(names(dfToTest)[-notPredictors], function(predictor){
testModel <- glm(click_text ~ get(predictor), data = dfToTest, family = poisson())
pchisq(testModel$null.deviance-testModel$deviance, testModel$df.null-testModel$df.residual, lower.tail = F)
})
names(dfToTest)[notPredictors]
names(dfToTest)[-notPredictors]
unique(dfToTest$form
)
?unique
?complete.cases
unique(na.omit(dfToTest$form))
notPredictors <- unique(c(which(sapply(dfToTest, function(col){!length(unique(na.omit(col)))>1})), respIndex))
names(dfToTest)[notPredictors]
sapply(names(dfToTest)[-notPredictors], function(predictor){
testModel <- glm(click_text ~ get(predictor), data = dfToTest, family = poisson())
pchisq(testModel$null.deviance-testModel$deviance, testModel$df.null-testModel$df.residual, lower.tail = F)
})
results <- sapply(names(dfToTest)[-notPredictors], function(predictor){
testModel <- glm(click_text ~ get(predictor), data = dfToTest, family = poisson())
pchisq(testModel$null.deviance-testModel$deviance, testModel$df.null-testModel$df.residual, lower.tail = F)
})
arrange(results)
sort(results)
unique(dfToTest$click_url)
install.packages("gmodels")
regressionResults <- sort(results)
library(gmodels)
CrossTable(dfToTest$click_url, dfToTest$click_text, fisher = T, chisq = T, expected = T, prop.c = F, prop.t = F, prop.chisq = F, sresid = T, format = "SPSS")
chiSqResult <- CrossTable(dfToTest$click_url, dfToTest$click_text, fisher = T, chisq = T, expected = T, prop.c = F, prop.t = F, prop.chisq = F, sresid = T, format = "SPSS")
chiSqResult <- CrossTable(dfToTest$`$browser`, dfToTest$click_text, fisher = T, chisq = T, expected = T, prop.c = F, prop.t = F, prop.chisq = F, sresid = T, format = "SPSS")
?CrossTable
chiSqResult <- CrossTable(dfToTest$`$browser`, dfToTest$click_text, fisher = T, chisq = T, expected = F, prop.c = F, prop.t = F, prop.chisq = F, sresid = F, format = "SPSS")
chiSqResult <- CrossTable(dfToTest$`$browser`, dfToTest$click_text, fisher = F, chisq = T, expected = F, prop.c = F, prop.t = F, prop.chisq = F, sresid = F, format = "SPSS")
chiSqResult <- CrossTable(dfToTest$`$browser`, dfToTest$click_text, fisher = F, chisq = F, expected = F, prop.c = F, prop.t = F, prop.chisq = F, sresid = F, format = "SPSS")
chiSqResult <- CrossTable(dfToTest$`$browser`, dfToTest$click_text, fisher = T, chisq = T, expected = F, prop.c = F, prop.t = F, prop.chisq = F, sresid = F, format = "SPSS")
chiSqResult <- CrossTable(dfToTest$`$browser`, dfToTest$click_text, fisher = T, chisq = T, expected = F, prop.c = F, prop.t = F, prop.chisq = F, sresid = F, format = "SAS")
?chisq.test
chisq.test(dfToTest$click_text, dfToTest$`$browser`)
chiSqResults <- sapply(dfToTest[notPredictors], function(predictor){
chisq.test(dfToTest$click_text, predictor)
})
chiSqResults <- sapply(dfToTest[notPredictors], function(predictor){
chisq.test(dfToTest$click_text, predictor)
})
chiSqResults <- sapply(dfToTest[-notPredictors], function(predictor){
chisq.test(dfToTest$click_text, predictor)
})
names(dfToTest)[notPredictors]
chiSqResults <- sapply(dfToTest[-notPredictors], function(predictor){
chisq.test(dfToTest$click_text, predictor)
})
chiSqResults <- sapply(dfToTest[-notPredictors], function(predictor){
browser()
chisq.test(dfToTest$click_text, predictor)
})
chiSqResults <- sapply(names(dfToTest)[-notPredictors], function(predictor){
browser()
chisq.test(dfToTest$click_text, dfToTest[[predictor]])
})
chiSqResults <- sapply(names(dfToTest)[-notPredictors], function(predictor){
browser()
chisq.test(dfToTest$click_text, dfToTest[[predictor]])
})
class(dfToTest$hash)
warnings()
unique(dfToTest$hash)
chiSqResults <- sapply(names(dfToTest)[-notPredictors], function(predictor){
# browser()
chisq.test(dfToTest$click_text, as.factor(dfToTest[[predictor]]))
})
chiSqResults <- sapply(dfToTest[-notPredictors], function(predictor){
# browser()
chisq.test(dfToTest$click_text, predictor)
})
warnings()
chiSqResults <- sapply(dfToTest[-c(notPredictors, 20)], function(predictor){
# browser()
chisq.test(dfToTest$click_text, predictor)
})
chiSqResults <- sapply(dfToTest[-notPredictors], function(predictor){
browser()
chisq.test(dfToTest$click_text, predictor)
})
chiSqResults <- sapply(dfToTest[-notPredictors], function(predictor){
print(any(is.na(predictor)))
browser()
chisq.test(dfToTest$click_text, predictor)
})
chiSqResults <- sapply(dfToTest[-notPredictors], function(predictor){
print(any(is.na(predictor)))
# browser()
print(chisq.test(dfToTest$click_text, predictor))
})
chiSqResults <- sapply(names(dfToTest)[-notPredictors], function(predictor){
print(any(is.na(predictor)))
# browser()
print(chisq.test(dfToTest$click_text, dfToTest[[predictor]]))
})
chiSqResults <- sapply(names(dfToTest)[-notPredictors], function(predictor){
print(predictor)
# browser()
print(chisq.test(dfToTest$click_text, dfToTest[[predictor]]))
})
count(dfToTest$`$browser`)
install.packages("plotly")
toPlot <- dfToTest %>% group_by(`$browser`) %>% summarise(propNa = mean(click_text), n = count())
toPlot <- dfToTest %>% group_by(`$browser`) %>% summarise(propNa = mean(click_text), n = count(`$browser`))
toPlot <- dfToTest %>% group_by(`$browser`) %>% summarise(propNa = mean(click_text), n = n())
View(toPlot)
ggplot(toPlot, aes($browser, propNa, size = n)) + geom_point()
ggplot(toPlot, aes(`$browser`, propNa, size = n)) + geom_point()
p <- ggplot(toPlot, aes(`$browser`, propNa, size = n)) + geom_point()
library(plotly)
ggplotly(p)
regressionResults
toPlotTitle <- dfToTest %>% group_by(page_title) %>% summarise(propNa = mean(click_text), n = n())
View(toPlotTitle)
p2 <- ggplot(toPlotTitle, aes(page_title, propNa, size = n)) + geom_point()
plotly(p2)
ggplotly(p2)
p2 <- ggplot(toPlotTitle, aes(page_title, propNa, size = n)) + geom_point() + theme(axis.text.x = element_text(angle=90))
ggplotly(p2)
model_clickUrl <- glm(click_text ~ click_url, data = dfToTest, family = poission())
model_clickUrl <- glm(click_text ~ click_url, data = dfToTest, family = poisson())
summary(model_clickUrl)
ggplotly(p2)
dfToTest %>% group_by(page_title) %>% summarize(sum(click_text))
dfToTest %>% group_by(page_title) %>% summarize(NaNum = sum(click_text)) %>% arrange(desc(NaNum))
dfToTest %>% group_by(page_title) %>% summarize(NaNum = sum(click_text), propNa = mean(click_text)) %>% arrange(desc(NaNum))
shiny::runApp('Desktop/projects/MixPanel-dataAudit')
runApp('Desktop/projects/MixPanel-dataAudit')
runApp('Desktop/projects/MixPanel-dataAudit')
runApp('Desktop/projects/MixPanel-dataAudit')
runApp('Desktop/projects/MixPanel-dataAudit')
runApp('Desktop/projects/MixPanel-dataAudit')
runApp('Desktop/projects/MixPanel-dataAudit')
runApp('Desktop/projects/MixPanel-dataAudit')
runApp('Desktop/projects/MixPanel-dataAudit')
respObject$status_code
httr::content(respObject)
content(respObject)$error
respObject$content$error
respObject$content
runApp('Desktop/projects/MixPanel-dataAudit')
runApp('Desktop/projects/MixPanel-dataAudit')
runApp('Desktop/projects/MixPanel-dataAudit')
runApp('Desktop/projects/MixPanel-dataAudit')
runApp('Desktop/projects/MixPanel-dataAudit')
respObject$status_code<=200
runApp('Desktop/projects/MixPanel-dataAudit')
respObject()$status_code
class(respObject())
runApp('Desktop/projects/MixPanel-dataAudit')
runApp('Desktop/projects/MixPanel-dataAudit')
q('no')
library(ggplot2)
library(tidyverse)
library(shinyjs)
shiny::runApp('Desktop/projects/MixPanel-dataAudit')
runApp('Desktop/projects/MixPanel-dataAudit')
runApp('Desktop/projects/MixPanel-dataAudit')
install.packages("CRANsearcher")
install.packages("ggExtra")
install.packages("ggquickeda")
install.packages("RtutoR")
install.packages("shinydashboard")
install.packages("shinydashboardPlus")
install.packages("ShinyItemAnalysis")
runApp('Desktop/projects/MixPanel-dataAudit')
runApp('Desktop/projects/MixPanel-dataAudit')
runApp('Desktop/projects/MixPanel-dataAudit')
runApp('Desktop/projects/MixPanel-dataAudit')
isTRUE(1)
isTRUE(0)
1 == TRUE
TRUE == 1
FALSE == 1
FALSE == 0
ifelse(2 %% 2)
2 %% 2
1 %% 2
ifelse(2 %% 2, "header", "table")
ifelse(2 %% 1, "header", "table")
ifelse(1 %% 2, "header", "table")
2 // 2
2 %/% 2
1 %/% 2
4 %/% 2
3 %/% 2
runApp('Desktop/projects/MixPanel-dataAudit')
i <- 1
ifelse(i %% 2, i / 2, (i %/% 2) + 1)
ifelse(i %% 2, i %/% 2, (i %/% 2) + 1)
ifelse(i %% 2, (i %/% 2) + 1, i %/% 2)
i <- 2
ifelse(i %% 2, (i %/% 2) + 1, i %/% 2)
i <- 3
ifelse(i %% 2, (i %/% 2) + 1, i %/% 2)
i <- 4
ifelse(i %% 2, (i %/% 2) + 1, i %/% 2)
runApp('Desktop/projects/MixPanel-dataAudit')
runApp('Desktop/projects/MixPanel-dataAudit')
runApp('Desktop/projects/MixPanel-dataAudit')
runApp('Desktop/projects/MixPanel-dataAudit')
runApp('Desktop/projects/MixPanel-dataAudit')
runApp('Desktop/projects/MixPanel-dataAudit')
runApp('Desktop/projects/MixPanel-dataAudit')
c07fd9eeb23df9b66e3ab042386c079c
runApp('Desktop/projects/MixPanel-dataAudit')
?actionLink
?a
runApp('Desktop/projects/MixPanel-dataAudit')
?shinyjs
?onclick
runApp('Desktop/projects/MixPanel-dataAudit')
runApp('Desktop/projects/MixPanel-dataAudit')
runApp('Desktop/projects/MixPanel-dataAudit')
runApp('Desktop/projects/MixPanel-dataAudit')
runApp('Desktop/projects/MixPanel-dataAudit')
runApp('Desktop/projects/MixPanel-dataAudit')
runApp('Desktop/projects/MixPanel-dataAudit')
q('no')
shiny::runApp('Desktop/projects/GA_shiny')
q('no')
q('no')
setwd("Desktop/practice")
library(tidyverse)
df_retailData <- read_csv("rfmData.csv")
View(df_retailData)
glimps(df_retailData
)
glimpse(df_retailData)
?replace
sapply(df_retailData, table)
glimpse(df_retailData)
str(df_retailData)
summary(df_retailData)
df_retailData %>% mutate(Quantity = replate(Quantity, Quantity<=, NA), UnitPrice = replace(UnitPrice, UnitPrice<= 0, NA)) -> df_retailData
df_retailData %>% mutate(Quantity = replace(Quantity, Quantity<=, NA), UnitPrice = replace(UnitPrice, UnitPrice<= 0, NA)) -> df_retailData
df_retailData %>% mutate(Quantity = replace(Quantity, Quantity <= 0, NA), UnitPrice = replace(UnitPrice, UnitPrice <= 0, NA)) -> df_retailData
summary(df_retailData)
?drop_na
summary(drop_na(df_retailData))
df_retailData_noNA <- drop_na(df_retailData)
df_retailData_noNA$InvoiceNo <- as.factor(df_retailData_noNA$InvoiceNo)
df_retailData_noNA$StockCode <- as.factor(df_retailData_noNA$StockCode)
df_retailData_noNA$InvoiceDate <- as.Date(df_retailData_noNA$InvoiceDate, format = "%m/%d/%Y %H:%M")
df_retailData_noNA$CustomerID <- as.factor(df_retailData_noNA$CustomerID)
df_retailData_noNA$Country <- as.factor(df_retailData_noNA$Country)
df_retailData_noNA$total <- df_retailData_noNA$Quantity * df_retailData_noNA$UnitPrice
glimpse(df_retailData_noNA)
n_distinct(df_retailData_noNA$CustomerID)
Sys.Date() - df_retailData_noNA$InvoiceDate[1]
as.integer(Sys.Date() - df_retailData_noNA$InvoiceDate[1])
df_retailData_noNA %>%
group_by(CustomerID) %>%
summarise(Recency = as.integer(Sys.Date() - max(InvoiceDate)),
Frequency = n_distinct(InvoiceNo), Monetary = sum(total)) -> df_RFM
View(df_RFM)
knitr::kable(df_RFM)
head(knitr::kable(df_RFM))
length(duplicated(df_retailData_noNA$InvoiceNo))
class(duplicated(df_retailData_noNA$InvoiceNo))
sum(duplicated(df_retailData_noNA$InvoiceNo))
View(head(subset(df_retailData_noNA, CustomerID==12346)))
View(head(subset(df_retailData_noNA, CustomerID==12348)))
hist(df_RFM$Recency)
hist(df_RFM$Frequency)
hist(df_RFM$Monetary)
df_logMonetary <- log(df_RFM$Monetary)
df_RFM$logMonetary <- df_logMonetary
rm(df_logMonetary)
hist(df_RFM$logMonetary)
View(df_RFM)
?quantile
quantile(head(df_RFM$Frequency, 20), probs = c(.2, .4, .6. .8. 1))
quantile(head(df_RFM$Frequency, 20), probs = c(.2, .4, .6, .8, 1))
head(df_RFM$Frequency)
head(df_RFM$Frequency, 20)
sort(head(df_RFM$Frequency, 20))
View(sort(head(df_RFM$Frequency, 20)))
install.packages("binr")
?cut
cut(sort(head(df_RFM$Frequency, 20)), breaks = quantile(head(df_RFM$Frequency, 20), probs = c(.2, .4, .6, .8, 1)))
library(binr)
bins.quantiles(sort(head(df_RFM$Frequency, 20)), target.bins = 5)
bins.quantiles(sort(head(df_RFM$Frequency, 20)), target.bins = c(.2, .4, .6, .8, 1))
?bins.quantiles
bins.quantiles(sort(head(df_RFM$Frequency, 20)), target.bins = 5, max.breaks = 5)
bins.quantiles(sort(head(df_RFM$Frequency, 20)), target.bins = 5, max.breaks = 5, verbose = TRUE)
library(Hmisc)
?cut2
sort(head(df_RFM$Frequency, 20))
cut2(sort(head(df_RFM$Frequency, 20)), g = 5)
quantile(sort(head(df_RFM$Frequency, 20)), c(.2, .4, .6, .8, 1))
class(cut2(sort(head(df_RFM$Frequency, 20)), g = 5))
levels(cut2(sort(head(df_RFM$Frequency, 20)), g = 5))
mode(cut2(sort(head(df_RFM$Frequency, 20)), g = 5))
as.numeric(levels(cut2(sort(head(df_RFM$Frequency, 20)), g = 5)))
as.numeric(cut2(sort(head(df_RFM$Frequency, 20)), g = 5))
?scale
df_RFM2 <- df_RFM
row.names(df_RFM2 <- df_RFM2$CustomerID)
df_RFM2 <- df_RFM
row.names(df_RFM2) <- df_RFM2$CustomerID
View(df_RFM2)
df_RFM2$CustomerID <- NULL
View(df_RFM2)
View(df_RFM)
df_RFM2 <- df_RFM[, c(2, 3, 5)]
row.names(df_RFM2) <- df_RFM2$CustomerID
df_RFM2$CustomerID <- NULL
View(df_RFM2)
df_RFM2 <- scale(df_RFM2)
df_RFM2 <- df_RFM[, c(2, 3, 5)]
row.names(df_RFM2) <- df_RFM2$CustomerID
View(df_RFM2)
df_RFM2 <- df_RFM
row.names(df_RFM2) <- df_RFM2$CustomerID
df_RFM2$CustomerID <- NULL
View(df_RFM2)
df_RFM$Monetary <- NULL
View(df_RFM2)
View(df_RFM2)
df_RFM$Monetary <- df_RFM2$Monetary
df_RFM2$Monetary <- NULL
df_RFM2$CustomerID <- NULL
View(df_RFM)
View(df_RFM2)
df_RFM2 <- scale(df_RFM2)
summary(df_RFM2)
d <- dist(df_RFM2)
c <- hclust(d, method = 'complete')
plot(c)
members <- cutree(c, k = 8)
plot(members)
df_RFM_grading <- data.frame(R = cut2(df_RFM$Recency, g = 5),
F = cut2(df_RFM$Frequency, g = 5),
M = cut2(df_RFM$logMonetary, g = 5),
Mlog = cut2(df_RFM$Monetary, g = 5))
q()
